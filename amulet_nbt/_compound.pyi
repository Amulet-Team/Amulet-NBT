from typing import Any, Dict
from collections.abc import MutableMapping

from ._value import AbstractBaseMutableTag
from ._dtype import AnyNBT
from ._int import ByteTag, ShortTag, IntTag, LongTag
from ._float import FloatTag, DoubleTag
from ._string import StringTag
from ._list import ListTag
from ._array import ByteArrayTag, IntArrayTag, LongArrayTag

class CompoundTag(AbstractBaseMutableTag, MutableMapping[str, AnyNBT]):
    tag_id: int
    def __init__(self, value: Any = (), **kwvals: AnyNBT): ...
    @property
    def py_dict(self) -> Dict[str, AnyNBT]: ...
    def get_byte(self, key: str) -> ByteTag: ...
    def get_short(self, key: str) -> ShortTag: ...
    def get_int(self, key: str) -> IntTag: ...
    def get_long(self, key: str) -> LongTag: ...
    def get_float(self, key: str) -> FloatTag: ...
    def get_double(self, key: str) -> DoubleTag: ...
    def get_string(self, key: str) -> StringTag: ...
    def get_list(self, key: str) -> ListTag: ...
    def get_compound(self, key: str) -> CompoundTag: ...
    def get_byte_array(self, key: str) -> ByteArrayTag: ...
    def get_int_array(self, key: str) -> IntArrayTag: ...
    def get_long_array(self, key: str) -> LongArrayTag: ...

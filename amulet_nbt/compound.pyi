from typing import Iterator, Any, Optional, Tuple

from .value import BaseMutableTag
from .dtype import AnyNBT

class TAG_Compound(BaseMutableTag, dict):
    tag_id: int
    def __init__(self, value: Any = (), **kwvals: AnyNBT): ...
    @staticmethod
    def fromkeys(keys, value=None) -> TAG_Compound: ...
    @property
    def value(self) -> dict: ...
    def __getitem__(self, key: str) -> AnyNBT: ...
    def __setitem__(self, key: str, value: AnyNBT) -> None: ...
    def setdefault(self, key: str, value: AnyNBT): ...
    def update(self, other: Any = (), **others: AnyNBT): ...
    def __delitem__(self, key: str): ...
    def __iter__(self) -> Iterator[AnyNBT]: ...
    def get(self, key: str, default: Optional[AnyNBT] = None) -> Optional[AnyNBT]: ...
    def pop(self, key: str, default: Optional[AnyNBT] = None) -> Optional[AnyNBT]: ...
    def popitem(self) -> Tuple[str, AnyNBT]: ...

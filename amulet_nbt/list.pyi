from typing import Iterator, Iterable, overload, List

from .value import BaseMutableTag
from .dtype import AnyNBT

class TAG_List(BaseMutableTag):
    tag_id: int
    def __init__(self, value: Iterable[AnyNBT] = (), list_data_type=1): ...
    @property
    def value(self) -> list: ...
    def __repr__(self): ...
    def __contains__(self, item) -> bool: ...
    def __iter__(self) -> Iterator[AnyNBT]: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, index: int) -> AnyNBT: ...
    @overload
    def __getitem__(self, index: slice) -> List[AnyNBT]: ...
    @overload
    def __setitem__(self, index: int, value: AnyNBT): ...
    @overload
    def __setitem__(self, index: slice, value: Iterable[AnyNBT]): ...
    def __delitem__(self, index): ...
    def append(self, value: AnyNBT) -> None: ...
    def extend(self, other: Iterable[AnyNBT]): ...
    def insert(self, index: int, value: AnyNBT): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def __eq__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __iadd__(self, other): ...
    def clear(self): ...
    def count(self, x) -> int: ...
    @overload
    def index(self, x) -> int: ...
    @overload
    def index(self, x, start: int) -> int: ...
    @overload
    def index(self, x, start: int, end: int) -> int: ...
    def pop(self, i: int) -> AnyNBT: ...
    def remove(self, x: int): ...
    def reverse(self): ...
    def sort(self, *, key=None, reverse=False): ...

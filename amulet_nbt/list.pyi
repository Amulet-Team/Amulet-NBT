from typing import Iterator, Iterable, overload, List, Union
from typing_extensions import SupportsIndex

from .value import BaseMutableTag
from .dtype import AnyNBT

class ListTag(BaseMutableTag, list):
    tag_id: int
    list_data_type: int
    @overload
    def __init__(self, value: Iterable[AnyNBT] = ()) -> None: ...
    @overload
    def __init__(self, value: Iterable[AnyNBT] = (), list_data_type=1) -> None: ...
    @property
    def py_data(self) -> list: ...
    def copy(self) -> List[AnyNBT]: ...
    def append(self, __object: AnyNBT) -> None: ...
    def extend(self, __iterable: Iterable[AnyNBT]) -> None: ...
    def pop(self, __index: int = ...) -> AnyNBT: ...
    def index(self, __value: AnyNBT, __start: int = ..., __stop: int = ...) -> int: ...
    def count(self, __value: AnyNBT) -> int: ...
    def insert(self, __index: int, __object: AnyNBT) -> None: ...
    def remove(self, __value: AnyNBT) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[AnyNBT]: ...
    @overload
    def __getitem__(self, i: SupportsIndex) -> AnyNBT: ...
    @overload
    def __getitem__(self, s: slice) -> List[AnyNBT]: ...
    @overload
    def __setitem__(self, i: SupportsIndex, o: AnyNBT) -> None: ...
    @overload
    def __setitem__(self, s: slice, o: Iterable[AnyNBT]) -> None: ...
    def __delitem__(self, i: Union[SupportsIndex, slice]) -> None: ...
    def __add__(self, x: List[AnyNBT]) -> List[AnyNBT]: ...
    def __radd__(self, other): ...
    def __iadd__(self, x: Iterable[AnyNBT]) -> ListTag: ...
    def __mul__(self, n: int) -> List[AnyNBT]: ...
    def __rmul__(self, n: int) -> List[AnyNBT]: ...
    def __imul__(self, n: int) -> ListTag: ...
    def __contains__(self, o: object) -> bool: ...
    def __reversed__(self) -> Iterator[AnyNBT]: ...
    def __gt__(self, x: List[AnyNBT]) -> bool: ...
    def __ge__(self, x: List[AnyNBT]) -> bool: ...
    def __lt__(self, x: List[AnyNBT]) -> bool: ...
    def __le__(self, x: List[AnyNBT]) -> bool: ...

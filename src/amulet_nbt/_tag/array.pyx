## This file is generated from a template.
## Do not modify this file directly or your changes will get overwritten.
## Edit the accompanying .pyx.tp file instead.

## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

import numpy
cimport numpy
numpy.import_array()
from typing import Any, Iterator

from cython.operator cimport dereference
from cpython cimport Py_INCREF
from libc.stdint cimport (
    int8_t,
    int32_t,
    int64_t,
)
from libcpp.memory cimport make_shared
from amulet_nbt._nbt cimport TagNode, CByteArrayTag, CIntArrayTag, CLongArrayTag
from .abc cimport AbstractBaseMutableTag
# from amulet_nbt._const cimport CommaSpace, ID_BYTE_ARRAY, ID_INT_ARRAY, ID_LONG_ARRAY
# from amulet_nbt._dtype import EncoderType


cdef class AbstractBaseArrayTag(AbstractBaseMutableTag):
    @property
    def np_array(self) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        """
        A numpy array holding the same internal data.
        Changes to the array will also modify the internal state.
        """
        raise NotImplementedError

    @property
    def py_data(self) -> Any:
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.np_array

    # Sized
    def __len__(self) -> int:
        raise NotImplementedError

    # Sequence
    def __getitem__(self, item):
        raise NotImplementedError

    def __iter__(self):
        raise NotImplementedError

    def __contains__(self, value):
        raise NotImplementedError

    def __reversed__(self):
        raise NotImplementedError

    # MutableSequence
    def __setitem__(self, key, value):
        raise NotImplementedError

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        raise NotImplementedError


import numpy
cdef class ByteArrayTag(AbstractBaseArrayTag):
    """This class behaves like an 1D Numpy signed integer array with each value stored in a byte."""
    tag_id: int = 7

    def __init__(self, object value = ()) -> None:
        cdef numpy.ndarray arr = numpy.asarray(value, numpy.dtype("int8")).ravel()
        self.cpp = make_shared[CByteArrayTag](arr.size)
        cdef size_t i
        for i in range(arr.size):
            dereference(self.cpp)[i] = arr[i]

    @staticmethod
    cdef ByteArrayTag wrap(CByteArrayTagPtr cpp):
        cdef ByteArrayTag tag = ByteArrayTag.__new__(ByteArrayTag)
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[CByteArrayTagPtr](self.cpp)
        return node

    @property
    def np_array(self) -> NDArray[numpy.int8]:
        return numpy.asarray(self)

    def __eq__(self, object other) -> bool:
        if not isinstance(other, ByteArrayTag):
            return False
        cdef ByteArrayTag tag = other
        return dereference(self.cpp) == dereference(tag.cpp)

    def __repr__(self) -> str:
        return f"ByteArrayTag({list(self)})"

    def __str__(self) -> str:
        return str(list(self))

    def __reduce__(self):
        return ByteArrayTag, (list(self),)

    def __copy__(self) -> ByteArrayTag:
        return ByteArrayTag.wrap(
            make_shared[CByteArrayTag](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> ByteArrayTag:
        return ByteArrayTag.wrap(
            make_shared[CByteArrayTag](dereference(self.cpp))
        )

    # Sized
    def __len__(self) -> int:
        return dereference(self.cpp).size()

    # Sequence
    def __getitem__(self, object item):
        return numpy.asarray(self)[item]

    def __iter__(self) -> Iterator[numpy.int8]:
        return iter(numpy.asarray(self))

    def __reversed__(self) -> Iterator[numpy.int8]:
        return reversed(numpy.asarray(self))

    def __contains__(self, value) -> bool:
        return value in numpy.asarray(self)

    # MutableSequence
    def __setitem__(self, object item, object value):
        numpy.asarray(self)[item] = value

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int8]:
        cdef numpy.npy_intp shape[1]
        shape[0] = <numpy.npy_intp> dereference(self.cpp).size()
        cdef numpy.ndarray ndarray = numpy.PyArray_SimpleNewFromData(1, shape, numpy.NPY_INT8, dereference(self.cpp).data())
        Py_INCREF(self)
        numpy.PyArray_SetBaseObject(ndarray, self)
        return ndarray
#
#     # cdef str _to_snbt(self):
#     #     cdef long long elem
#     #     cdef list tags = []
#     #     for elem in self.cpp:
#     #         tags.append(f"{elem}B")
#     #     return f"[B;{CommaSpace.join(tags)}]"



import numpy
cdef class IntArrayTag(AbstractBaseArrayTag):
    """This class behaves like an 1D Numpy signed integer array with each value stored in a int."""
    tag_id: int = 11

    def __init__(self, object value = ()) -> None:
        cdef numpy.ndarray arr = numpy.asarray(value, numpy.int32).ravel()
        self.cpp = make_shared[CIntArrayTag](arr.size)
        cdef size_t i
        for i in range(arr.size):
            dereference(self.cpp)[i] = arr[i]

    @staticmethod
    cdef IntArrayTag wrap(CIntArrayTagPtr cpp):
        cdef IntArrayTag tag = IntArrayTag.__new__(IntArrayTag)
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[CIntArrayTagPtr](self.cpp)
        return node

    @property
    def np_array(self) -> NDArray[numpy.int32]:
        return numpy.asarray(self)

    def __eq__(self, object other) -> bool:
        if not isinstance(other, IntArrayTag):
            return False
        cdef IntArrayTag tag = other
        return dereference(self.cpp) == dereference(tag.cpp)

    def __repr__(self) -> str:
        return f"IntArrayTag({list(self)})"

    def __str__(self) -> str:
        return str(list(self))

    def __reduce__(self):
        return IntArrayTag, (list(self),)

    def __copy__(self) -> IntArrayTag:
        return IntArrayTag.wrap(
            make_shared[CIntArrayTag](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> IntArrayTag:
        return IntArrayTag.wrap(
            make_shared[CIntArrayTag](dereference(self.cpp))
        )

    # Sized
    def __len__(self) -> int:
        return dereference(self.cpp).size()

    # Sequence
    def __getitem__(self, object item):
        return numpy.asarray(self)[item]

    def __iter__(self) -> Iterator[numpy.int32]:
        return iter(numpy.asarray(self))

    def __reversed__(self) -> Iterator[numpy.int32]:
        return reversed(numpy.asarray(self))

    def __contains__(self, value) -> bool:
        return value in numpy.asarray(self)

    # MutableSequence
    def __setitem__(self, object item, object value):
        numpy.asarray(self)[item] = value

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int32]:
        cdef numpy.npy_intp shape[1]
        shape[0] = <numpy.npy_intp> dereference(self.cpp).size()
        cdef numpy.ndarray ndarray = numpy.PyArray_SimpleNewFromData(1, shape, numpy.NPY_INT32, dereference(self.cpp).data())
        Py_INCREF(self)
        numpy.PyArray_SetBaseObject(ndarray, self)
        return ndarray
#
#     # cdef str _to_snbt(self):
#     #     cdef long long elem
#     #     cdef list tags = []
#     #     for elem in self.cpp:
#     #         tags.append(f"{elem}")
#     #     return f"[I;{CommaSpace.join(tags)}]"



import numpy
cdef class LongArrayTag(AbstractBaseArrayTag):
    """This class behaves like an 1D Numpy signed integer array with each value stored in a long."""
    tag_id: int = 12

    def __init__(self, object value = ()) -> None:
        cdef numpy.ndarray arr = numpy.asarray(value, numpy.int64).ravel()
        self.cpp = make_shared[CLongArrayTag](arr.size)
        cdef size_t i
        for i in range(arr.size):
            dereference(self.cpp)[i] = arr[i]

    @staticmethod
    cdef LongArrayTag wrap(CLongArrayTagPtr cpp):
        cdef LongArrayTag tag = LongArrayTag.__new__(LongArrayTag)
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[CLongArrayTagPtr](self.cpp)
        return node

    @property
    def np_array(self) -> NDArray[numpy.int64]:
        return numpy.asarray(self)

    def __eq__(self, object other) -> bool:
        if not isinstance(other, LongArrayTag):
            return False
        cdef LongArrayTag tag = other
        return dereference(self.cpp) == dereference(tag.cpp)

    def __repr__(self) -> str:
        return f"LongArrayTag({list(self)})"

    def __str__(self) -> str:
        return str(list(self))

    def __reduce__(self):
        return LongArrayTag, (list(self),)

    def __copy__(self) -> LongArrayTag:
        return LongArrayTag.wrap(
            make_shared[CLongArrayTag](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> LongArrayTag:
        return LongArrayTag.wrap(
            make_shared[CLongArrayTag](dereference(self.cpp))
        )

    # Sized
    def __len__(self) -> int:
        return dereference(self.cpp).size()

    # Sequence
    def __getitem__(self, object item):
        return numpy.asarray(self)[item]

    def __iter__(self) -> Iterator[numpy.int64]:
        return iter(numpy.asarray(self))

    def __reversed__(self) -> Iterator[numpy.int64]:
        return reversed(numpy.asarray(self))

    def __contains__(self, value) -> bool:
        return value in numpy.asarray(self)

    # MutableSequence
    def __setitem__(self, object item, object value):
        numpy.asarray(self)[item] = value

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int64]:
        cdef numpy.npy_intp shape[1]
        shape[0] = <numpy.npy_intp> dereference(self.cpp).size()
        cdef numpy.ndarray ndarray = numpy.PyArray_SimpleNewFromData(1, shape, numpy.NPY_INT64, dereference(self.cpp).data())
        Py_INCREF(self)
        numpy.PyArray_SetBaseObject(ndarray, self)
        return ndarray
#
#     # cdef str _to_snbt(self):
#     #     cdef long long elem
#     #     cdef list tags = []
#     #     for elem in self.cpp:
#     #         tags.append(f"{elem}L")
#     #     return f"[L;{CommaSpace.join(tags)}]"


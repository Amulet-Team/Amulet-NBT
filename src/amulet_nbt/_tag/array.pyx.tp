{{py:import base64}}
{{base64.b64decode("IyMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGEgdGVtcGxhdGUuCiMjIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5IG9yIHlvdXIgY2hhbmdlcyB3aWxsIGdldCBvdmVyd3JpdHRlbi4KIyMgRWRpdCB0aGUgYWNjb21wYW55aW5nIC5weXgudHAgZmlsZSBpbnN0ZWFkLg==").decode()}}
# cython: language_level=3, boundscheck=False, wraparound=False
# distutils: language = c++
# distutils: extra_compile_args = -std=c++20 /std:c++20
# distutils: extra_link_args = -std=c++20 /std:c++20

import numpy
cimport numpy
numpy.import_array()
from numpy.typing import NDArray, ArrayLike
from typing import Any, Iterator, overload

from cython.operator cimport dereference
from cpython cimport Py_INCREF
from libcpp.memory cimport make_shared
from libcpp.string cimport string
from amulet_nbt._libcpp.endian cimport endian
from amulet_nbt._string_encoding._cpp cimport CStringEncode
from amulet_nbt._nbt_encoding._binary cimport write_named_tag
from amulet_nbt._tag._cpp cimport TagNode, CByteArrayTag, CIntArrayTag, CLongArrayTag
from .abc cimport AbstractBaseMutableTag
# from amulet_nbt._const cimport CommaSpace, ID_BYTE_ARRAY, ID_INT_ARRAY, ID_LONG_ARRAY
{{py:
import numpy
from template import include
}}


cdef class AbstractBaseArrayTag(AbstractBaseMutableTag):
    @property
    def np_array(self) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        """
        A numpy array holding the same internal data.
        Changes to the array will also modify the internal state.
        """
        raise NotImplementedError

    @property
    def py_data(self) -> Any:
        return self.np_array

    # Sized
    def __len__(self) -> int:
        """
        The length of the array.
        >>> from amulet_nbt import ByteArrayTag
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> len(tag)  # 3
        """
        raise NotImplementedError

    # Sequence
    @overload
    def __getitem__(self, item: int) -> numpy.int8 | numpy.int32 | numpy.int64:
        ...

    @overload
    def __getitem__(self, item: slice) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        ...

    @overload
    def __getitem__(self, item: ArrayLike) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        ...

    def __getitem__(self, item):
        """
        Get item(s) from the array.

        This supports the full numpy protocol.
        If a numpy array is returned, the array data is the same as the data contained in this class.

        >>> from amulet_nbt import ByteArrayTag
        >>> import numpy
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> tag[0]  # 1
        >>> tag[:1]  # numpy.array([1], dtype=numpy.int8)
        >>> tag[numpy.array([1, 2])]  # numpy.array([2, 3], dtype=int8)
        """
        raise NotImplementedError

    def __iter__(self) -> Iterator[numpy.int8 | numpy.int32 | numpy.int64]:
        """
        Iterate through the items in the array.

        >>> from amulet_nbt import ByteArrayTag
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> for num in tag:
        >>>     pass
        >>> iter(tag)
        """
        raise NotImplementedError

    def __reversed__(self) -> Iterator[numpy.int8 | numpy.int32 | numpy.int64]:
        """
        Iterate through the items in the array in reverse order.

        >>> from amulet_nbt import ByteArrayTag
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> for num in reversed(tag):
        >>>     pass
        """
        raise NotImplementedError

    def __contains__(self, item: Any) -> bool:
        """
        Check if an item is in the array.

        >>> from amulet_nbt import ByteArrayTag
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> 1 in tag  # True
        """
        raise NotImplementedError

    # MutableSequence
    @overload
    def __setitem__(self, item: int, value: numpy.integer) -> None:
        ...

    @overload
    def __setitem__(self, item: slice, value: ArrayLike[numpy.integer]) -> None:
        ...

    @overload
    def __setitem__(self, item: ArrayLike, value: ArrayLike[numpy.integer]) -> None:
        ...

    def __setitem__(self, key, value):
        """
        Set item(s) in the array.

        This supports the full numpy protocol.

        >>> from amulet_nbt import ByteArrayTag
        >>> import numpy
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> tag[0] = 10  # [10, 2, 3]
        >>> tag[:2] = [4, 5]  # [4, 5, 3]
        >>> tag[numpy.array([1, 2])] = [6, 7]  # [4, 6, 7]
        """
        raise NotImplementedError

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int8 | numpy.int32 | numpy.int64]:
        """
        Get a numpy array representation of the stored data.

        >>> from amulet_nbt import ByteArrayTag
        >>> import numpy
        >>> tag = ByteArrayTag([1, 2, 3])
        >>> arr = numpy.asarray(tag)
        """
        raise NotImplementedError


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.dtype("int8")',
    big_endian_data_type='numpy.dtype("int8")',
    little_endian_data_type='numpy.dtype("int8")',
    width=1,
    dtype="byte",
    snbt_prefix="B",
    snbt_suffix="B",
    cpp="int8_t",
    npy_c="NPY_INT8",
    tag_id = 7,
)}}


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.int32',
    big_endian_data_type='numpy.dtype(">i4")',
    little_endian_data_type='numpy.dtype("<i4")',
    width=4,
    dtype="int",
    snbt_prefix="I",
    snbt_suffix="",
    cpp="int32_t",
    npy_c="NPY_INT32",
    tag_id = 11,
)}}


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.int64',
    big_endian_data_type='numpy.dtype(">i8")',
    little_endian_data_type='numpy.dtype("<i8")',
    width=8,
    dtype="long",
    snbt_prefix="L",
    snbt_suffix="L",
    cpp="int64_t",
    npy_c="NPY_INT64",
    tag_id = 12,
)}}

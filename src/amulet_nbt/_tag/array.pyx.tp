{{py:import base64}}
{{base64.b64decode("IyMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGEgdGVtcGxhdGUuCiMjIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5IG9yIHlvdXIgY2hhbmdlcyB3aWxsIGdldCBvdmVyd3JpdHRlbi4KIyMgRWRpdCB0aGUgYWNjb21wYW55aW5nIC5weXgudHAgZmlsZSBpbnN0ZWFkLg==").decode()}}

## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

import numpy
cimport numpy
numpy.import_array()
from typing import Any, Iterator

from cython.operator cimport dereference
from cpython cimport Py_INCREF
from libc.stdint cimport (
    int8_t,
    int32_t,
    int64_t,
)
from libcpp.memory cimport make_shared
from amulet_nbt._nbt.array cimport Array
from amulet_nbt._nbt cimport TagNode, CByteTag, CIntTag, CLongTag, CByteArrayTag, CIntArrayTag, CLongArrayTag
from amulet_nbt._tag.abc cimport AbstractBaseMutableTag
# from amulet_nbt._const cimport CommaSpace, ID_BYTE_ARRAY, ID_INT_ARRAY, ID_LONG_ARRAY
# from amulet_nbt._dtype import EncoderType
{{py:
import numpy
from template import include
}}


cdef class AbstractBaseArrayTag(AbstractBaseMutableTag):
    @property
    def np_array(AbstractBaseArrayTag self) -> numpy.ndarray:
        """
        A numpy array holding the same internal data.
        Changes to the array will also modify the internal state.
        """
        raise NotImplementedError

    @property
    def py_data(self) -> Any:
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.np_array

    # Sized
    def __len__(AbstractBaseArrayTag self):
        raise NotImplementedError

    # Sequence
    def __getitem__(AbstractBaseArrayTag self, item):
        raise NotImplementedError

    def __iter__(self):
        raise NotImplementedError

    def __contains__(self, value):
        raise NotImplementedError

    def __reversed__(self):
        raise NotImplementedError

    # MutableSequence
    def __setitem__(AbstractBaseArrayTag self, key, value):
        raise NotImplementedError

    # Array interface
    def __array__(AbstractBaseArrayTag self, dtype=None):
        raise NotImplementedError


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.dtype("int8")',
    big_endian_data_type='numpy.dtype("int8")',
    little_endian_data_type='numpy.dtype("int8")',
    width=1,
    dtype="byte",
    snbt_prefix="B",
    snbt_suffix="B",
    cpp="int8_t",
    npy_c="NPY_INT8",
)}}


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.int32',
    big_endian_data_type='numpy.dtype(">i4")',
    little_endian_data_type='numpy.dtype("<i4")',
    width=4,
    dtype="int",
    snbt_prefix="I",
    snbt_suffix="",
    cpp="int32_t",
    npy_c="NPY_INT32",
)}}


{{include(
    "amulet_nbt/tpf/ArrayTag.pyx.tpf",
    native_data_type='numpy.int64',
    big_endian_data_type='numpy.dtype(">i8")',
    little_endian_data_type='numpy.dtype("<i8")',
    width=8,
    dtype="long",
    snbt_prefix="L",
    snbt_suffix="L",
    cpp="int64_t",
    npy_c="NPY_INT64",
)}}

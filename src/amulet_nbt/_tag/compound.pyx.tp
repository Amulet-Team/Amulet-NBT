{{py:
import base64
from template import include
}}
{{base64.b64decode("IyMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGEgdGVtcGxhdGUuCiMjIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5IG9yIHlvdXIgY2hhbmdlcyB3aWxsIGdldCBvdmVyd3JpdHRlbi4KIyMgRWRpdCB0aGUgYWNjb21wYW55aW5nIC5weXgudHAgZmlsZSBpbnN0ZWFkLg==").decode()}}
# cython: language_level=3, boundscheck=False, wraparound=False
# distutils: language = c++
# distutils: extra_compile_args = CPPCARGS
# cython: c_string_type=str, c_string_encoding=utf8

from __future__ import annotations

from collections.abc import Mapping, Iterator, Iterable, KeysView, ItemsView, ValuesView
from typing import Any, overload, Type, TypeVar

from libcpp.string cimport string
from libcpp cimport bool
from libcpp.memory cimport make_shared
from cython.operator cimport dereference, postincrement
import amulet_nbt
from amulet_nbt._libcpp.endian cimport endian
from amulet_nbt._string_encoding._cpp cimport CStringEncode
from amulet_nbt._nbt_encoding._binary cimport write_named_tag
from amulet_nbt._nbt_encoding._string cimport write_compound_snbt

from amulet_nbt._tag._cpp cimport CCompoundTag, CCompoundTagPtr, CIntTag, TagNode
from amulet_nbt._libcpp.variant cimport get
from .abc cimport AbstractBaseTag, AbstractBaseMutableTag

from amulet_nbt._tag._cpp cimport (
    CByteTag,
    CShortTag,
    CIntTag,
    CLongTag,
    CFloatTag,
    CDoubleTag,
    CStringTag,
    CCompoundTag,
    CListTagPtr,
    CCompoundTagPtr,
    CByteArrayTagPtr,
    CIntArrayTagPtr,
    CLongArrayTagPtr,
    TagNode,
)

from .int cimport ByteTag, ShortTag, IntTag, LongTag
from .float cimport FloatTag, DoubleTag
from .string cimport StringTag
from .list cimport is_list_eq, ListTag
from .array cimport ByteArrayTag, IntArrayTag, LongArrayTag
from .deepcopy cimport CCompoundTagPtr_deepcopy

import amulet_nbt

{{py:
ClassData = (
    #id,  C cls,           C node cls          C list cls        py cls,         tag var,          list var
    (1,  "CByteTag",      "CByteTag",         "CByteList",      "ByteTag",      "byte_tag",       "byte_list",       ),
    (2,  "CShortTag",     "CShortTag",        "CShortList",     "ShortTag",     "short_tag",      "short_list",      ),
    (3,  "CIntTag",       "CIntTag",          "CIntList",       "IntTag",       "int_tag",        "int_list",        ),
    (4,  "CLongTag",      "CLongTag",         "CLongList",      "LongTag",      "long_tag",       "long_list",       ),
    (5,  "CFloatTag",     "CFloatTag",        "CFloatList",     "FloatTag",     "float_tag",      "float_list",      ),
    (6,  "CDoubleTag",    "CDoubleTag",       "CDoubleList",    "DoubleTag",    "double_tag",     "double_list",     ),
    (7,  "CByteArrayTag", "CByteArrayTagPtr", "CByteArrayList", "ByteArrayTag", "byte_array_tag", "byte_array_list", ),
    (8,  "CStringTag",    "CStringTag",       "CStringList",    "StringTag",    "string_tag",     "string_list",     ),
    (9,  "CListTag",      "CListTagPtr",      "CListList",      "ListTag",      "list_tag",       "list_list",       ),
    (10, "CCompoundTag",  "CCompoundTagPtr",  "CCompoundList",  "CompoundTag",  "compound_tag",   "compound_list",   ),
    (11, "CIntArrayTag",  "CIntArrayTagPtr",  "CIntArrayList",  "IntArrayTag",  "int_array_tag",  "int_array_list",  ),
    (12, "CLongArrayTag", "CLongArrayTagPtr", "CLongArrayList", "LongArrayTag", "long_array_tag", "long_array_list", ),
)
}}

{{
"\n\n\n".join(
f"""cdef inline bool _is_{tag_var}_node_eq(TagNode* a, TagNode* b) noexcept nogil:
    if dereference(b).index() == {index}:
        return {
            f"is_list_eq(get[{c_node_cls}](dereference(a)), get[{c_node_cls}](dereference(b)))" if index == 9 else
            f"is_compound_eq(get[{c_node_cls}](dereference(a)), get[{c_node_cls}](dereference(b)))" if index == 10 else
            f"dereference(get[{c_node_cls}](dereference(a))) == dereference(get[{c_node_cls}](dereference(b)))" if index in {7, 11, 12} else
            f"get[{c_node_cls}](dereference(a)) == get[{c_node_cls}](dereference(b))"
        }
    return False"""
        for index, c_cls, c_node_cls, c_list_cls, py_cls, tag_var, list_var in ClassData
    )
}}


cdef bool is_compound_eq(CCompoundTagPtr a, CCompoundTagPtr b) noexcept nogil:
    if dereference(a).size() != dereference(b).size():
        return False

    cdef CCompoundTag.iterator it1 = dereference(a).begin()
    cdef CCompoundTag.iterator it2
    cdef string key
    cdef TagNode* node
    cdef size_t node_index

    while it1 != dereference(a).end():
        key = dereference(it1).first
        it2 = dereference(b).find(key)
        if it2 == dereference(b).end():
            return False
        node = &dereference(it1).second
        node_index = dereference(node).index()
{{
"\n".join(
f"""        {"el"*(index!=1)}if node_index == {index}:
            if not _is_{tag_var}_node_eq(node, &dereference(it2).second):
                return False"""
    for index, c_cls, c_node_cls, c_list_cls, py_cls, tag_var, list_var in ClassData
)
}}
        postincrement(it1)
    return True


cdef AbstractBaseTag wrap_node(TagNode* node):
    cdef size_t index = dereference(node).index()
{{
"\n".join(
f"""    {"el"*(index!=1)}if index == {index}:
        return {py_cls}.wrap(get[{c_node_cls}](dereference(node)))"""
    for index, c_cls, c_node_cls, c_list_cls, py_cls, tag_var, list_var in ClassData
)
}}
    else:
        raise RuntimeError


TagT = TypeVar("TagT", bound=AbstractBaseTag)


cdef class CompoundTag(AbstractBaseMutableTag):
    """A Python wrapper around a C++ unordered map.

    Note that this class is not thread safe and inherits all the limitations of a C++ unordered_map.
    """
    tag_id: int = 10

    def __init__(
        self,
        value: Mapping[str | bytes, amulet_nbt.AnyNBT] | Iterable[tuple[str | bytes, amulet_nbt.AnyNBT]] = (),
        **kwargs: amulet_nbt.AnyNBT,
    ) -> None:
        self.cpp = make_shared[CCompoundTag]()
        self.update(value, **kwargs)

    @staticmethod
    cdef CompoundTag wrap(CCompoundTagPtr cpp):
        cdef CompoundTag tag = CompoundTag.__new__(CompoundTag)
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[CCompoundTagPtr](self.cpp)
        return node

    @property
    def py_dict(self) -> dict[str, amulet_nbt.AnyNBT]:
        """A shallow copy of the CompoundTag as a python dictionary."""
        return dict(self)

    @property
    def py_data(self) -> Any:
        return dict(self)

    cdef string write_nbt(self, string name, endian endianness, CStringEncode string_encode):
        return write_named_tag[CCompoundTagPtr](name, self.cpp, endianness, string_encode)

{{include("amulet_nbt/tpf/to_snbt_multiline.pyx.tpf", tag="compound")}}

    def __eq__(self, object other: Any) -> bool:
        if not isinstance(other, CompoundTag):
            return False
        cdef CompoundTag tag = other
        return is_compound_eq(self.cpp, tag.cpp)

    def __repr__(self) -> str:
        return f"CompoundTag({dict(self)})"

    def __str__(self) -> str:
        return str(dict(self))

    def __reduce__(self):
        return CompoundTag, (dict(self),)

    def __copy__(self) -> CompoundTag:
        return CompoundTag.wrap(
            make_shared[CCompoundTag](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> CompoundTag:
        return CompoundTag.wrap(CCompoundTagPtr_deepcopy(self.cpp))

    # Sized
    def __len__(self) -> int:
        return dereference(self.cpp).size()

    # Iterable
    def __iter__(self) -> Iterator[str | bytes]:
        cdef CCompoundTag.iterator it = dereference(self.cpp).begin()
        cdef string key
        while it != dereference(self.cpp).end():
            key = dereference(it).first
            try:
                yield <str>key
            except UnicodeDecodeError as e:
                yield <bytes>key
            postincrement(it)

    # Mapping
    def __getitem__(self, string key: str | bytes) -> amulet_nbt.AbstractBaseTag:
        cdef CCompoundTag.iterator it = dereference(self.cpp).find(key)

        if it == dereference(self.cpp).end():
            raise KeyError(key)

        return wrap_node(&dereference(it).second)

    @overload
    def get(
        self,
        key: str | bytes,
        default: TagT = None,
        cls: Type[TagT] = AbstractBaseTag,
    ) -> TagT:
        ...

    @overload
    def get(
        self,
        key: str | bytes,
        default: None = None,
        cls: Type[TagT] = AbstractBaseTag,
    ) -> TagT | None:
        ...

    def get(
        self,
        string key: str | bytes,
        object default: TagT | None = None,
        object cls: Type[TagT] = AbstractBaseTag
    ) -> TagT | None:
        """Get an item from the CompoundTag.

        :param key: The key to get
        :param default: The value to return if the key does not exist or the type is wrong.
        :param cls: The class that the stored tag must inherit from. If the type is incorrect default is returned.
        :return: The tag stored in the CompoundTag if the type is correct else default.
        :raises: KeyError if the key does not exist.
        :raises: TypeError if the stored type is not a subclass of cls.
        """
        cdef CCompoundTag.iterator it = dereference(self.cpp).find(key)

        if it == dereference(self.cpp).end():
            return default

        cdef AbstractBaseTag tag = wrap_node(&dereference(it).second)
        if isinstance(tag, cls):
            return tag
        else:
            return default

    def __contains__(self, string key: str | bytes) -> bool:
        return dereference(self.cpp).contains(key)

    def keys(self) -> KeysView[str | bytes]:
        return KeysView(self)

    def items(self) -> ItemsView[str | bytes, amulet_nbt.AnyNBT]:
        return ItemsView(self)

    def values(self) -> ValuesView[amulet_nbt.AnyNBT]:
        return ValuesView(self)

    # MutableMapping
    def __setitem__(self, string key: str | bytes, AbstractBaseTag tag not None: amulet_nbt.AnyNBT) -> None:
        dereference(self.cpp)[<string> key] = tag.to_node()

    def __delitem__(self, string key: str | bytes) -> None:
        dereference(self.cpp).erase(key)

    __marker = object()

    def pop(self, string key, default=__marker) -> amulet_nbt.AnyNBT:
        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
          If key is not found, d is returned if given, otherwise KeyError is raised.
        '''
        cdef CCompoundTag.iterator it = dereference(self.cpp).find(key)
        if it == dereference(self.cpp).end():
            if default is self.__marker:
                raise KeyError(key)
            else:
                return default

        cdef AbstractBaseTag tag = wrap_node(&dereference(it).second)
        dereference(self.cpp).erase(it)
        return tag

    def popitem(self) -> amulet_nbt.AnyNBT:
        '''D.popitem() -> (k, v), remove and return some (key, value) pair
           as a 2-tuple; but raise KeyError if D is empty.
        '''
        cdef CCompoundTag.iterator it = dereference(self.cpp).begin()
        if it == dereference(self.cpp).end():
            raise KeyError

        cdef string key = dereference(it).first
        cdef AbstractBaseTag tag = wrap_node(&dereference(it).second)
        dereference(self.cpp).erase(it)
        return key, tag

    def clear(self) -> None:
        dereference(self.cpp).clear()

    def update(self, other=(), /, **kwds) -> None:
        ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
            In either case, this is followed by: for k, v in F.items(): D[k] = v
        '''
        if isinstance(other, Mapping):
            for key in other:
                self[key] = other[key]
        elif hasattr(other, "keys"):
            for key in other.keys():
                self[key] = other[key]
        else:
            for key, value in other:
                self[key] = value
        for key, value in kwds.items():
            self[key] = value

    def setdefault(self, string key, AbstractBaseTag tag = None, object cls = AbstractBaseTag) -> amulet_nbt.AnyNBT:
        cdef CCompoundTag.iterator it = dereference(self.cpp).find(key)

        if it == dereference(self.cpp).end():
            # if the key does not exist then set it
            if tag is None:
                raise TypeError("Cannot setdefault a value of None.")
            self[key] = tag
            return tag

        cdef AbstractBaseTag existing_tag = wrap_node(&dereference(it).second)

        if not isinstance(existing_tag, cls):
            # if the key exists but has the wrong type then set it
            if tag is None:
                raise TypeError("Cannot setdefault a value of None.")
            self[key] = tag
            return tag

        return existing_tag

    @classmethod
    def fromkeys(cls, keys: Iterable[str], AbstractBaseTag value) -> CompoundTag:
        return cls(dict.fromkeys(keys, value))

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="ByteTag", tag_name="byte")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="ShortTag", tag_name="short")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="IntTag", tag_name="int")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="LongTag", tag_name="long")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="FloatTag", tag_name="float")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="DoubleTag", tag_name="double")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="StringTag", tag_name="string")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="ListTag", tag_name="list")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="CompoundTag", tag_name="compound")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="ByteArrayTag", tag_name="byte_array")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="IntArrayTag", tag_name="int_array")}}

{{include("amulet_nbt/tpf/CompoundGetSetdefault.pyx.tpf", py_cls="LongArrayTag", tag_name="long_array")}}

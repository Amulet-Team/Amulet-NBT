{{py:import base64}}
{{base64.b64decode("IyMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGEgdGVtcGxhdGUuCiMjIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5IG9yIHlvdXIgY2hhbmdlcyB3aWxsIGdldCBvdmVyd3JpdHRlbi4KIyMgRWRpdCB0aGUgYWNjb21wYW55aW5nIC5weXgudHAgZmlsZSBpbnN0ZWFkLg==").decode()}}
## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from typing import Any

from amulet_nbt._nbt cimport TagNode, CFloatTag, CDoubleTag
from .numeric cimport AbstractBaseNumericTag
# from amulet_nbt._const cimport ID_FLOAT, ID_DOUBLE
# from amulet_nbt._dtype import EncoderType
{{py:from template import include}}


cdef class AbstractBaseFloatTag(AbstractBaseNumericTag):
    """Abstract Base Class for all float Tag classes"""

    @property
    def py_float(self) -> float:
        """
        A python float representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        raise NotImplementedError

    @property
    def py_data(self) -> Any:
        return self.py_float


cdef class FloatTag(AbstractBaseFloatTag):
    """A single precision float class."""
    tag_id: int = 5

    def __init__(self, value = 0):
        self.cpp = float(value)

{{include("amulet_nbt/tpf/FloatTag.pyx.tpf", py_cls="FloatTag", tag_id=5)}}


cdef class DoubleTag(AbstractBaseFloatTag):
    """A double precision float class."""
    tag_id: int = 6

    def __init__(self, value = 0):
        self.cpp = float(value)

{{include("amulet_nbt/tpf/FloatTag.pyx.tpf", py_cls="DoubleTag", tag_id=6)}}

## This file is generated from a template.
## Do not modify this file directly or your changes will get overwritten.
## Edit the accompanying .pyx.tp file instead.
## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from io import BytesIO
from copy import deepcopy
import warnings

from amulet_nbt._nbt cimport CByteTag, CShortTag, CIntTag, CLongTag
from amulet_nbt._tag.numeric cimport AbstractBaseNumericTag
# from amulet_nbt._const cimport ID_BYTE, ID_SHORT, ID_INT, ID_LONG
# from amulet_nbt._dtype import EncoderType


cdef class AbstractBaseIntTag(AbstractBaseNumericTag):
    """Abstract Base Class for all int Tag classes"""

    @property
    def py_int(AbstractBaseNumericTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        raise NotImplementedError

    @property
    def py_data(self):
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.py_int


cdef class ByteTag(AbstractBaseIntTag):
    """
    A 1 byte integer class.
    Can Store numbers between -(2^7) and (2^7 - 1)
    """
    # tag_id = ID_BYTE

    def __init__(ByteTag self, value = 0):
        self.cpp = self._sanitise_value(int(value))

    @staticmethod
    cdef ByteTag wrap(CByteTag cpp):
        cdef ByteTag tag = ByteTag.__new__(ByteTag)
        tag.cpp = cpp
        return tag

    @property
    def py_int(ByteTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.cpp

    cdef CByteTag _sanitise_value(ByteTag self, value):
        return (value & 0x7F) - (value & 0x80)


cdef class ShortTag(AbstractBaseIntTag):
    """
    A 2 byte integer class.
    Can Store numbers between -(2^15) and (2^15 - 1)
    """
    # tag_id = ID_SHORT

    def __init__(ShortTag self, value = 0):
        self.cpp = self._sanitise_value(int(value))

    @staticmethod
    cdef ShortTag wrap(CShortTag cpp):
        cdef ShortTag tag = ShortTag.__new__(ShortTag)
        tag.cpp = cpp
        return tag

    @property
    def py_int(ShortTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.cpp

    cdef CShortTag _sanitise_value(ShortTag self, value):
        return (value & 0x7FFF) - (value & 0x8000)


cdef class IntTag(AbstractBaseIntTag):
    """
    A 4 byte integer class.
    Can Store numbers between -(2^31) and (2^31 - 1)
    """
    # tag_id = ID_INT

    def __init__(IntTag self, value = 0):
        self.cpp = self._sanitise_value(int(value))

    @staticmethod
    cdef IntTag wrap(CIntTag cpp):
        cdef IntTag tag = IntTag.__new__(IntTag)
        tag.cpp = cpp
        return tag

    @property
    def py_int(IntTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.cpp

    cdef CIntTag _sanitise_value(IntTag self, value):
        return (value & 0x7FFF_FFFF) - (value & 0x8000_0000)


cdef class LongTag(AbstractBaseIntTag):
    """
    An 8 byte integer class.
    Can Store numbers between -(2^63) and (2^63 - 1)
    """
    # tag_id = ID_LONG

    def __init__(LongTag self, value = 0):
        self.cpp = self._sanitise_value(int(value))

    @staticmethod
    cdef LongTag wrap(CLongTag cpp):
        cdef LongTag tag = LongTag.__new__(LongTag)
        tag.cpp = cpp
        return tag

    @property
    def py_int(LongTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.cpp

    cdef CLongTag _sanitise_value(LongTag self, value):
        return (value & 0x7FFF_FFFF_FFFF_FFFF) - (value & 0x8000_0000_0000_0000)

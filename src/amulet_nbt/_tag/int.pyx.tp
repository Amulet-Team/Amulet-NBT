{{py:import base64}}
{{base64.b64decode("IyMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGEgdGVtcGxhdGUuCiMjIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5IG9yIHlvdXIgY2hhbmdlcyB3aWxsIGdldCBvdmVyd3JpdHRlbi4KIyMgRWRpdCB0aGUgYWNjb21wYW55aW5nIC5weXgudHAgZmlsZSBpbnN0ZWFkLg==").decode()}}
## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from typing import Any

from amulet_nbt._nbt cimport TagNode, CByteTag, CShortTag, CIntTag, CLongTag
from .numeric cimport AbstractBaseNumericTag
# from amulet_nbt._const cimport ID_BYTE, ID_SHORT, ID_INT, ID_LONG
# from amulet_nbt._dtype import EncoderType
{{py:from template import include}}


cdef class AbstractBaseIntTag(AbstractBaseNumericTag):
    """Abstract Base Class for all int Tag classes"""

    @property
    def py_int(self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        raise NotImplementedError

    @property
    def py_data(self) -> Any:
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.py_int


cdef class ByteTag(AbstractBaseIntTag):
    """
    A 1 byte integer class.
    Can Store numbers between -(2^7) and (2^7 - 1)
    """
    tag_id: int = 1

    def __init__(self, value = 0):
        value = int(value)
        self.cpp = (value & 0x7F) - (value & 0x80)

{{include("amulet_nbt/tpf/IntTag.pyx.tpf", py_cls="ByteTag", tag_id=1)}}


cdef class ShortTag(AbstractBaseIntTag):
    """
    A 2 byte integer class.
    Can Store numbers between -(2^15) and (2^15 - 1)
    """
    tag_id: int = 2

    def __init__(self, value = 0):
        value = int(value)
        self.cpp = (value & 0x7FFF) - (value & 0x8000)

{{include("amulet_nbt/tpf/IntTag.pyx.tpf", py_cls="ShortTag", tag_id=2)}}


cdef class IntTag(AbstractBaseIntTag):
    """
    A 4 byte integer class.
    Can Store numbers between -(2^31) and (2^31 - 1)
    """
    tag_id: int = 3

    def __init__(self, value = 0):
        value = int(value)
        self.cpp = (value & 0x7FFF_FFFF) - (value & 0x8000_0000)

{{include("amulet_nbt/tpf/IntTag.pyx.tpf", py_cls="IntTag", tag_id=3)}}


cdef class LongTag(AbstractBaseIntTag):
    """
    An 8 byte integer class.
    Can Store numbers between -(2^63) and (2^63 - 1)
    """
    tag_id: int = 4

    def __init__(self, value = 0):
        value = int(value)
        self.cpp = (value & 0x7FFF_FFFF_FFFF_FFFF) - (value & 0x8000_0000_0000_0000)

{{include("amulet_nbt/tpf/IntTag.pyx.tpf", py_cls="LongTag", tag_id=4)}}

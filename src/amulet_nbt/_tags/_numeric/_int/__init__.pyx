## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from io import BytesIO
from copy import deepcopy
import warnings

from amulet_nbt._nbt cimport ByteTag as CByteTag, ShortTag as CShortTag, IntTag as CIntTag, LongTag as CLongTag
from amulet_nbt._tags._numeric cimport AbstractBaseNumericTag
from amulet_nbt._const cimport ID_BYTE, ID_SHORT, ID_INT, ID_LONG
from amulet_nbt._dtype import EncoderType


cdef class AbstractBaseIntTag(AbstractBaseNumericTag):
    """Abstract Base Class for all int Tag classes"""

    @property
    def py_int(AbstractBaseNumericTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        raise NotImplementedError

    @property
    def py_data(self):
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.py_int


cdef class ByteTag(AbstractBaseIntTag):
    """
    A 1 byte integer class.
    Can Store numbers between -(2^7) and (2^7 - 1)
    """
    tag_id = ID_BYTE

    def __init__(ByteTag self, value = 0):
        self.value_ = self._sanitise_value(int(value))

    def __str__(ByteTag self):
        return str(self.value_)

    def __eq__(ByteTag self, other):
        cdef ByteTag other_
        if isinstance(other, ByteTag):
            other_ = other
            return self.value_ == other_.value_
        return NotImplemented

    def __reduce__(ByteTag self):
        return self.__class__, (self.value_,)

    def __deepcopy__(ByteTag self, memo=None):
        return self.__class__(deepcopy(self.value_, memo=memo))

    def __copy__(ByteTag self):
        return self.__class__(self.value_)

    def __hash__(ByteTag self):
        return hash((self.tag_id, self.value_))

    def __ge__(ByteTag self, other):
        cdef ByteTag other_
        if isinstance(other, ByteTag):
            other_ = other
            return self.value_ >= other_.value_
        return NotImplemented

    def __gt__(ByteTag self, other):
        cdef ByteTag other_
        if isinstance(other, ByteTag):
            other_ = other
            return self.value_ > other_.value_
        return NotImplemented

    def __le__(ByteTag self, other):
        cdef ByteTag other_
        if isinstance(other, ByteTag):
            other_ = other
            return self.value_ <= other_.value_
        return NotImplemented

    def __lt__(ByteTag self, other):
        cdef ByteTag other_
        if isinstance(other, ByteTag):
            other_ = other
            return self.value_ < other_.value_
        return NotImplemented

    def __repr__(ByteTag self):
        return f"{self.__class__.__name__}({self.value_})"

    def __int__(ByteTag self):
        return self.value_.__int__()

    def __float__(ByteTag self):
        return self.value_.__float__()

    def __bool__(ByteTag self):
        return self.value_.__bool__()

    @property
    def py_int(ByteTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.value_

    cdef CByteTag _sanitise_value(ByteTag self, value):
        return (value & 0x7F) - (value & 0x80)

    cdef str _to_snbt(ByteTag self):
        return f"{self.value_}b"


cdef class ShortTag(AbstractBaseIntTag):
    """
    A 2 byte integer class.
    Can Store numbers between -(2^15) and (2^15 - 1)
    """
    tag_id = ID_SHORT

    def __init__(ShortTag self, value = 0):
        self.value_ = self._sanitise_value(int(value))

    def __str__(ShortTag self):
        return str(self.value_)

    def __eq__(ShortTag self, other):
        cdef ShortTag other_
        if isinstance(other, ShortTag):
            other_ = other
            return self.value_ == other_.value_
        return NotImplemented

    def __reduce__(ShortTag self):
        return self.__class__, (self.value_,)

    def __deepcopy__(ShortTag self, memo=None):
        return self.__class__(deepcopy(self.value_, memo=memo))

    def __copy__(ShortTag self):
        return self.__class__(self.value_)

    def __hash__(ShortTag self):
        return hash((self.tag_id, self.value_))

    def __ge__(ShortTag self, other):
        cdef ShortTag other_
        if isinstance(other, ShortTag):
            other_ = other
            return self.value_ >= other_.value_
        return NotImplemented

    def __gt__(ShortTag self, other):
        cdef ShortTag other_
        if isinstance(other, ShortTag):
            other_ = other
            return self.value_ > other_.value_
        return NotImplemented

    def __le__(ShortTag self, other):
        cdef ShortTag other_
        if isinstance(other, ShortTag):
            other_ = other
            return self.value_ <= other_.value_
        return NotImplemented

    def __lt__(ShortTag self, other):
        cdef ShortTag other_
        if isinstance(other, ShortTag):
            other_ = other
            return self.value_ < other_.value_
        return NotImplemented

    def __repr__(ShortTag self):
        return f"{self.__class__.__name__}({self.value_})"

    def __int__(ShortTag self):
        return self.value_.__int__()

    def __float__(ShortTag self):
        return self.value_.__float__()

    def __bool__(ShortTag self):
        return self.value_.__bool__()

    @property
    def py_int(ShortTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.value_

    cdef CShortTag _sanitise_value(ShortTag self, value):
        return (value & 0x7FFF) - (value & 0x8000)

    cdef str _to_snbt(ShortTag self):
        return f"{self.value_}s"


cdef class IntTag(AbstractBaseIntTag):
    """
    A 4 byte integer class.
    Can Store numbers between -(2^31) and (2^31 - 1)
    """
    tag_id = ID_INT

    def __init__(IntTag self, value = 0):
        self.value_ = self._sanitise_value(int(value))

    def __str__(IntTag self):
        return str(self.value_)

    def __eq__(IntTag self, other):
        cdef IntTag other_
        if isinstance(other, IntTag):
            other_ = other
            return self.value_ == other_.value_
        return NotImplemented

    def __reduce__(IntTag self):
        return self.__class__, (self.value_,)

    def __deepcopy__(IntTag self, memo=None):
        return self.__class__(deepcopy(self.value_, memo=memo))

    def __copy__(IntTag self):
        return self.__class__(self.value_)

    def __hash__(IntTag self):
        return hash((self.tag_id, self.value_))

    def __ge__(IntTag self, other):
        cdef IntTag other_
        if isinstance(other, IntTag):
            other_ = other
            return self.value_ >= other_.value_
        return NotImplemented

    def __gt__(IntTag self, other):
        cdef IntTag other_
        if isinstance(other, IntTag):
            other_ = other
            return self.value_ > other_.value_
        return NotImplemented

    def __le__(IntTag self, other):
        cdef IntTag other_
        if isinstance(other, IntTag):
            other_ = other
            return self.value_ <= other_.value_
        return NotImplemented

    def __lt__(IntTag self, other):
        cdef IntTag other_
        if isinstance(other, IntTag):
            other_ = other
            return self.value_ < other_.value_
        return NotImplemented

    def __repr__(IntTag self):
        return f"{self.__class__.__name__}({self.value_})"

    def __int__(IntTag self):
        return self.value_.__int__()

    def __float__(IntTag self):
        return self.value_.__float__()

    def __bool__(IntTag self):
        return self.value_.__bool__()

    @property
    def py_int(IntTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.value_

    cdef CIntTag _sanitise_value(IntTag self, value):
        return (value & 0x7FFF_FFFF) - (value & 0x8000_0000)

    cdef str _to_snbt(IntTag self):
        return f"{self.value_}"


cdef class LongTag(AbstractBaseIntTag):
    """
    An 8 byte integer class.
    Can Store numbers between -(2^63) and (2^63 - 1)
    """
    tag_id = ID_LONG

    def __init__(LongTag self, value = 0):
        self.value_ = self._sanitise_value(int(value))

    def __str__(LongTag self):
        return str(self.value_)

    def __eq__(LongTag self, other):
        cdef LongTag other_
        if isinstance(other, LongTag):
            other_ = other
            return self.value_ == other_.value_
        return NotImplemented

    def __reduce__(LongTag self):
        return self.__class__, (self.value_,)

    def __deepcopy__(LongTag self, memo=None):
        return self.__class__(deepcopy(self.value_, memo=memo))

    def __copy__(LongTag self):
        return self.__class__(self.value_)

    def __hash__(LongTag self):
        return hash((self.tag_id, self.value_))

    def __ge__(LongTag self, other):
        cdef LongTag other_
        if isinstance(other, LongTag):
            other_ = other
            return self.value_ >= other_.value_
        return NotImplemented

    def __gt__(LongTag self, other):
        cdef LongTag other_
        if isinstance(other, LongTag):
            other_ = other
            return self.value_ > other_.value_
        return NotImplemented

    def __le__(LongTag self, other):
        cdef LongTag other_
        if isinstance(other, LongTag):
            other_ = other
            return self.value_ <= other_.value_
        return NotImplemented

    def __lt__(LongTag self, other):
        cdef LongTag other_
        if isinstance(other, LongTag):
            other_ = other
            return self.value_ < other_.value_
        return NotImplemented

    def __repr__(LongTag self):
        return f"{self.__class__.__name__}({self.value_})"

    def __int__(LongTag self):
        return self.value_.__int__()

    def __float__(LongTag self):
        return self.value_.__float__()

    def __bool__(LongTag self):
        return self.value_.__bool__()

    @property
    def py_int(LongTag self) -> int:
        """
        A python int representation of the class.
        The returned data is immutable so changes will not mirror the instance.
        """
        return self.value_

    cdef CLongTag _sanitise_value(LongTag self, value):
        return (value & 0x7FFF_FFFF_FFFF_FFFF) - (value & 0x8000_0000_0000_0000)

    cdef str _to_snbt(LongTag self):
        return f"{self.value_}L"

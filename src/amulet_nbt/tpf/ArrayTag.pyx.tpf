{{py:
from template import include
}}
cdef class {{py_cls}}(AbstractBaseArrayTag):
    """This class behaves like an 1D Numpy signed integer array with each value stored in a {{dtype}}."""
    tag_id: int = {{tag_id}}

    def __init__(self, object value: Iterable[SupportsInt] = ()) -> None:
        """Construct a new {{py_cls}} object from an array-like object."""
        cdef numpy.ndarray arr = numpy.asarray(value, {{native_data_type}}).ravel()
        self.cpp = make_shared[{{cpp_cls}}](arr.size)
        cdef size_t i
        for i in range(arr.size):
            dereference(self.cpp)[i] = arr[i]

    @staticmethod
    cdef {{py_cls}} wrap({{cpp_cls_ptr}} cpp):
        cdef {{py_cls}} tag = {{py_cls}}.__new__({{py_cls}})
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[{{cpp_cls_ptr}}](self.cpp)
        return node

    @property
    def np_array(self) -> NDArray[numpy.int{{int_byte_width*8}}]:
        return numpy.asarray(self)

    cdef string write_nbt(self, string name, endian endianness, CStringEncode string_encode):
        return write_named_tag[{{cpp_cls_ptr}}](name, self.cpp, endianness, string_encode)

{{include("amulet_nbt/tpf/to_snbt.pyx.tpf", **locals())}}

    def __eq__(self, object other: Any) -> bool:
        if not isinstance(other, {{py_cls}}):
            return False
        cdef {{py_cls}} tag = other
        return dereference(self.cpp) == dereference(tag.cpp)

    def __repr__(self) -> str:
        return f"{{py_cls}}({list(self)})"

    def __str__(self) -> str:
        return str(list(self))

    def __reduce__(self):
        return {{py_cls}}, (list(self),)

    def __copy__(self) -> {{py_cls}}:
        return {{py_cls}}.wrap(
            make_shared[{{cpp_cls}}](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> {{py_cls}}:
        return {{py_cls}}.wrap(
            make_shared[{{cpp_cls}}](dereference(self.cpp))
        )

    # Sized
    def __len__(self) -> int:
        """The length of the array.

        >>> from amulet_nbt import {{py_cls}}
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> len(tag)  # 3
        """
        return dereference(self.cpp).size()

    # Sequence
    @overload
    def __getitem__(self, item: int) -> numpy.int{{int_byte_width*8}}:
        ...

    @overload
    def __getitem__(self, item: slice) -> NDArray[numpy.int{{int_byte_width*8}}]:
        ...

    @overload
    def __getitem__(self, item: ArrayLike) -> NDArray[numpy.int{{int_byte_width*8}}]:
        ...

    def __getitem__(self, object item):
        """Get item(s) from the array.

        This supports the full numpy protocol.
        If a numpy array is returned, the array data is the same as the data contained in this class.

        >>> from amulet_nbt import {{py_cls}}
        >>> import numpy
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> tag[0]  # 1
        >>> tag[:1]  # numpy.array([1], dtype=numpy.int8)
        >>> tag[numpy.array([1, 2])]  # numpy.array([2, 3], dtype=int8)
        """
        return numpy.asarray(self)[item]

    def __iter__(self) -> Iterator[numpy.int{{int_byte_width*8}}]:
        """Iterate through the items in the array.

        >>> from amulet_nbt import {{py_cls}}
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> for num in tag:
        >>>     pass
        >>> iter(tag)
        """
        return iter(numpy.asarray(self))

    def __reversed__(self) -> Iterator[numpy.int{{int_byte_width*8}}]:
        """Iterate through the items in the array in reverse order.

        >>> from amulet_nbt import {{py_cls}}
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> for num in reversed(tag):
        >>>     pass

        :return: A reversed iterator.
        """
        return reversed(numpy.asarray(self))

    def __contains__(self, value) -> bool:
        """Check if an item is in the array.

        >>> from amulet_nbt import {{py_cls}}
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> 1 in tag  # True
        """
        return value in numpy.asarray(self)

    # MutableSequence
    @overload
    def __setitem__(self, item: int, value: numpy.integer) -> None:
        ...

    @overload
    def __setitem__(self, item: slice, value: ArrayLike[numpy.integer]) -> None:
        ...

    @overload
    def __setitem__(self, item: ArrayLike, value: ArrayLike[numpy.integer]) -> None:
        ...

    def __setitem__(self, object item, object value):
        """Set item(s) in the array.

        This supports the full numpy protocol.

        >>> from amulet_nbt import {{py_cls}}
        >>> import numpy
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> tag[0] = 10  # [10, 2, 3]
        >>> tag[:2] = [4, 5]  # [4, 5, 3]
        >>> tag[numpy.array([1, 2])] = [6, 7]  # [4, 6, 7]
        """
        numpy.asarray(self)[item] = value

    # Array interface
    def __array__(self, dtype: Any = None) -> NDArray[numpy.int{{int_byte_width*8}}]:
        """Get a numpy array representation of the stored data.

        >>> from amulet_nbt import {{py_cls}}
        >>> import numpy
        >>> tag = {{py_cls}}([1, 2, 3])
        >>> arr = numpy.asarray(tag)

        :param dtype: This is ignored but is part of the array interace
        :return: A numpy array that shares the memory with this instance.
        """
        cdef numpy.npy_intp shape[1]
        shape[0] = <numpy.npy_intp> dereference(self.cpp).size()
        cdef numpy.ndarray ndarray = numpy.PyArray_SimpleNewFromData(1, shape, numpy.{{npy_c}}, dereference(self.cpp).data())
        Py_INCREF(self)
        numpy.PyArray_SetBaseObject(ndarray, self)
        return ndarray

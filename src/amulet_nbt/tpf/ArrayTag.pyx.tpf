import numpy

{{py:
from template import include
}}
cdef class {{dtype.capitalize()}}ArrayTag(AbstractBaseArrayTag):
    """This class behaves like an 1D Numpy signed integer array with each value stored in a {{dtype}}."""
    tag_id: int = {{tag_id}}

    def __init__(self, object value = ()) -> None:
        cdef numpy.ndarray arr = numpy.asarray(value, {{native_data_type}}).ravel()
        self.cpp = make_shared[C{{dtype.capitalize()}}ArrayTag](arr.size)
        cdef size_t i
        for i in range(arr.size):
            dereference(self.cpp)[i] = arr[i]

    @staticmethod
    cdef {{dtype.capitalize()}}ArrayTag wrap(C{{dtype.capitalize()}}ArrayTagPtr cpp):
        cdef {{dtype.capitalize()}}ArrayTag tag = {{dtype.capitalize()}}ArrayTag.__new__({{dtype.capitalize()}}ArrayTag)
        tag.cpp = cpp
        return tag

    cdef TagNode to_node(self):
        cdef TagNode node
        node.emplace[C{{dtype.capitalize()}}ArrayTagPtr](self.cpp)
        return node

    @property
    def np_array(self) -> NDArray[numpy.int{{width*8}}]:
        return numpy.asarray(self)

    def __eq__(self, object other) -> bool:
        if not isinstance(other, {{dtype.capitalize()}}ArrayTag):
            return False
        cdef {{dtype.capitalize()}}ArrayTag tag = other
        return dereference(self.cpp) == dereference(tag.cpp)

    def __repr__(self) -> str:
        return f"{{dtype.capitalize()}}ArrayTag({list(self)})"

    def __str__(self) -> str:
        return str(list(self))

    def __reduce__(self):
        return {{dtype.capitalize()}}ArrayTag, (list(self),)

    def __copy__(self) -> {{dtype.capitalize()}}ArrayTag:
        return {{dtype.capitalize()}}ArrayTag.wrap(
            make_shared[C{{dtype.capitalize()}}ArrayTag](dereference(self.cpp))
        )

    def __deepcopy__(self, memo=None) -> {{dtype.capitalize()}}ArrayTag:
        return {{dtype.capitalize()}}ArrayTag.wrap(
            make_shared[C{{dtype.capitalize()}}ArrayTag](dereference(self.cpp))
        )

    # Sized
    def __len__(self) -> int:
        return dereference(self.cpp).size()

    # Sequence
    def __getitem__(self, object item):
        return numpy.asarray(self)[item]

    def __iter__(self) -> Iterator[numpy.int{{width*8}}]:
        return iter(numpy.asarray(self))

    def __reversed__(self) -> Iterator[numpy.int{{width*8}}]:
        return reversed(numpy.asarray(self))

    def __contains__(self, value) -> bool:
        return value in numpy.asarray(self)

    # MutableSequence
    def __setitem__(self, object item, object value):
        numpy.asarray(self)[item] = value

    # Array interface
    def __array__(self, dtype=None) -> NDArray[numpy.int{{width*8}}]:
        cdef numpy.npy_intp shape[1]
        shape[0] = <numpy.npy_intp> dereference(self.cpp).size()
        cdef numpy.ndarray ndarray = numpy.PyArray_SimpleNewFromData(1, shape, numpy.{{npy_c}}, dereference(self.cpp).data())
        Py_INCREF(self)
        numpy.PyArray_SetBaseObject(ndarray, self)
        return ndarray
#
#     # cdef str _to_snbt(self):
#     #     cdef long long elem
#     #     cdef list tags = []
#     #     for elem in self.cpp:
#     #         tags.append(f"{elem}{{snbt_suffix}}")
#     #     return f"[{{snbt_prefix}};{CommaSpace.join(tags)}]"

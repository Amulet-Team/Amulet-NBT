## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

import numpy
cimport numpy
numpy.import_array()
from io import BytesIO
from copy import deepcopy
import warnings

from ._value cimport AbstractBaseMutableTag
from ._const cimport CommaSpace, ID_BYTE_ARRAY, ID_INT_ARRAY, ID_LONG_ARRAY
from ._util cimport write_array, BufferContext, read_int, read_data
from ._dtype import EncoderType
{{py:
import numpy
from template import include
}}


cdef class AbstractBaseArrayTag(AbstractBaseMutableTag):
    def __getitem__(AbstractBaseArrayTag self, item):
        raise NotImplementedError

    def __setitem__(AbstractBaseArrayTag self, key, value):
        raise NotImplementedError

    def __array__(AbstractBaseArrayTag self, dtype=None):
        raise NotImplementedError

    def __len__(AbstractBaseArrayTag self):
        raise NotImplementedError

    @property
    def np_array(AbstractBaseArrayTag self):
        """
        A numpy array holding the same internal data.
        Changes to the array will also modify the internal state.
        """
        raise NotImplementedError

    @property
    def py_data(self):
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.np_array


{{include(
    "AbstractBaseArrayTag.pyx",
    native_data_type='numpy.dtype("int8")',
    big_endian_data_type='numpy.dtype("int8")',
    little_endian_data_type='numpy.dtype("int8")',
    width=1,
    dtype="byte",
    snbt_prefix="B",
    snbt_suffix="B",
)}}


{{include(
    "AbstractBaseArrayTag.pyx",
    native_data_type='numpy.int32',
    big_endian_data_type='numpy.dtype(">i4")',
    little_endian_data_type='numpy.dtype("<i4")',
    width=4,
    dtype="int",
    snbt_prefix="I",
    snbt_suffix="",
)}}


{{include(
    "AbstractBaseArrayTag.pyx",
    native_data_type='numpy.int64',
    big_endian_data_type='numpy.dtype(">i8")',
    little_endian_data_type='numpy.dtype("<i8")',
    width=8,
    dtype="long",
    snbt_prefix="L",
    snbt_suffix="L",
)}}
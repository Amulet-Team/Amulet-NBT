## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from io import BytesIO
import re
from typing import Iterator, Dict, Type, TypeVar
from copy import copy, deepcopy
from collections.abc import MutableMapping
import sys
import warnings

from ._value cimport AbstractBaseTag, AbstractBaseMutableTag
from ._const cimport ID_END, ID_COMPOUND, CommaSpace, CommaNewline
from ._util cimport write_byte, BufferContext, read_byte, read_string
from ._load_nbt cimport load_payload
from ._dtype import AnyNBT, DecoderType, EncoderType
from ._int cimport (
    ByteTag,
    ShortTag,
    IntTag,
    LongTag,
)
from ._float cimport (
    FloatTag,
    DoubleTag,
)
from ._array cimport (
    ByteArrayTag,
    IntArrayTag,
    LongArrayTag,
)
from ._string cimport StringTag
from ._list cimport CyListTag
{{py:from template import include}}

NON_QUOTED_KEY = re.compile('[A-Za-z0-9._+-]+')

T = TypeVar("T")


cdef inline CyCompoundTag read_compound_tag(BufferContext buffer, bint little_endian, string_decoder: DecoderType):
    cdef CyCompoundTag tag = CompoundTag()
    cdef char tag_type
    cdef str name
    cdef AbstractBaseTag child_tag

    while True:
        tag_type = read_byte(buffer)
        if tag_type == ID_END:
            break
        else:
            name = read_string(buffer, little_endian, string_decoder)
            child_tag = load_payload(buffer, tag_type, little_endian, string_decoder)
            tag[name] = child_tag
    return tag


cdef inline void _check_dict(dict value) except *:
    cdef str key
    cdef AbstractBaseTag val
    for key, val in value.items():
        if key is None or val is None:
            raise TypeError()


cdef class CyCompoundTag(AbstractBaseMutableTag):
    """
    This class behaves like a python dictionary.
    All keys must be strings and all values must be NBT data types.
    """
    tag_id = ID_COMPOUND

    def __init__(CyCompoundTag self, object value = (), **kwargs):
        cdef dict dict_value = dict(value, **kwargs)
        _check_dict(dict_value)
        self.value_ = dict_value

    @classmethod
    def create(cls, object value = (), **kwargs) -> CompoundTag:
        return CompoundTag(value, **kwargs)

{{include("AbstractBaseMutableTag.pyx", cls_name="CyCompoundTag")}}

    @property
    def py_dict(CyCompoundTag self) -> Dict[str, AnyNBT]:
        """
        A python dictionary representation of the class.
        The returned list is a shallow copy of the class, meaning changes will not mirror the instance.
        Use the public API to modify the internal data.
        """
        return copy(self.value_)

    @property
    def py_data(self):
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.py_dict

    @staticmethod
    def fromkeys(object keys, AbstractBaseTag value=None):
        return CompoundTag(dict.fromkeys(keys, value))

    cdef str _to_snbt(CyCompoundTag self):
        cdef str name
        cdef AbstractBaseTag elem
        cdef list tags = []
        for name in sorted(self.value_, key=lambda k: (k.lower(), k.swapcase())):
            elem = self.value_[name]
            if NON_QUOTED_KEY.fullmatch(name) is None:
                tags.append(f'"{name}": {elem.to_snbt()}')
            else:
                tags.append(f'{name}: {elem.to_snbt()}')
        return f"{{start_braces}}{CommaSpace.join(tags)}{{end_braces}}"

    cdef str _pretty_to_snbt(CyCompoundTag self, str indent_chr, int indent_count=0, bint leading_indent=True):
        cdef str name
        cdef AbstractBaseTag elem
        cdef list tags = []
        for name in sorted(self.value_, key=lambda k: (k.lower(), k.swapcase())):
            elem = self.value_[name]
            tags.append(f'{indent_chr * (indent_count + 1)}"{name}": {elem._pretty_to_snbt(indent_chr, indent_count + 1, False)}')
        if tags:
            return f"{indent_chr * indent_count * leading_indent}{{start_braces}}\n{CommaNewline.join(tags)}\n{indent_chr * indent_count}{{end_braces}}"
        else:
            return f"{indent_chr * indent_count * leading_indent}{{start_braces}}{{end_braces}}"

    cdef void write_payload(
        CyCompoundTag self,
        object buffer: BytesIO,
        bint little_endian,
        string_encoder: EncoderType
    ) except *:
        cdef str key
        cdef AbstractBaseTag tag

        for key, tag in self.value_.items():
            tag.write_tag(buffer, key, little_endian, string_encoder)
        write_byte(ID_END, buffer)

    def __repr__(CyCompoundTag self):
        return f"{self.__class__.__name__}({repr(self.value_)})"

    def __getitem__(CyCompoundTag self, str key not None) -> AbstractBaseTag:
        return self.value_[key]

    def __setitem__(CyCompoundTag self, str key not None, AbstractBaseTag value not None):
        self.value_[key] = value

    def __delitem__(CyCompoundTag self, str key not None):
        self.value_.__delitem__(key)

    def __iter__(CyCompoundTag self) -> Iterator[str]:
        yield from self.value_

    def __len__(CyCompoundTag self) -> int:
        return self.value_.__len__()

{{include("CompoundGetSetdefault.pyx", tag_cls_name="ByteTag", tag_name="byte")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="ShortTag", tag_name="short")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="IntTag", tag_name="int")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="LongTag", tag_name="long")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="FloatTag", tag_name="float")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="DoubleTag", tag_name="double")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="StringTag", tag_name="string")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="CyListTag", py_tag_cls_name="CyListTag.create", tag_name="list")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="CyCompoundTag", py_tag_cls_name="CompoundTag", tag_name="compound")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="ByteArrayTag", tag_name="byte_array")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="IntArrayTag", tag_name="int_array")}}
{{include("CompoundGetSetdefault.pyx", tag_cls_name="LongArrayTag", tag_name="long_array")}}

class CompoundTag(CyCompoundTag, MutableMapping):
    pass

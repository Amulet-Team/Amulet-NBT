## This file is generated by tempita. Do not modify this file directly or your changes will get overwritten.
## To edit this file edit the template in template/src

from io import BytesIO
from copy import deepcopy
import warnings

from amulet_nbt._tags._value cimport AbstractBaseImmutableTag
from amulet_nbt._const cimport ID_STRING
from amulet_nbt._dtype import EncoderType
{{py:from template import include}}


cdef inline escape(str string):
    return string.replace('\\', '\\\\').replace('"', '\\"')


cdef class StringTag(AbstractBaseImmutableTag):
    """A class that behaves like a string."""
    tag_id = ID_STRING

    def __init__(StringTag self, str value = ""):
        self.value_ = value

{{include("AbstractBaseImmutableTag.pyx", cls_name="StringTag")}}

    @property
    def py_str(StringTag self) -> str:
        """
        A python string representation of the class.
        """
        return self.value_

    @property
    def py_data(self):
        """
        A python representation of the class. Note that the return type is undefined and may change in the future.
        You would be better off using the py_{type} or np_array properties if you require a fixed type.
        This is here for convenience to get a python representation under the same property name.
        """
        return self.py_str

    def __repr__(StringTag self):
        return f"{self.__class__.__name__}(\"{escape(self.py_str)}\")"

    cdef str _to_snbt(StringTag self):
        return f"\"{escape(self.py_str)}\""

    def __len__(self) -> int:
        return len(self.value_)
